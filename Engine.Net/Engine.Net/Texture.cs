//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Engine.Net {

public class Texture : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Texture(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Texture obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Texture() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ITexturePINVOKE.delete_Texture(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public byte GetNumMipMaps() {
    byte ret = ITexturePINVOKE.Texture_GetNumMipMaps(swigCPtr);
    return ret;
  }

  public byte GetArraySize() {
    byte ret = ITexturePINVOKE.Texture_GetArraySize(swigCPtr);
    return ret;
  }

  public EFormat GetFormat() {
    EFormat ret = (EFormat)ITexturePINVOKE.Texture_GetFormat(swigCPtr);
    return ret;
  }

  public Texture.Type GetTextureType() {
    Texture.Type ret = (Texture.Type)ITexturePINVOKE.Texture_GetTextureType(swigCPtr);
    return ret;
  }

  public SampleDesc GetSampleInfo() {
    SampleDesc ret = new SampleDesc(ITexturePINVOKE.Texture_GetSampleInfo(swigCPtr), true);
    return ret;
  }

  public uint GetSampleCount() {
    uint ret = ITexturePINVOKE.Texture_GetSampleCount(swigCPtr);
    return ret;
  }

  public uint GetSampleQuality() {
    uint ret = ITexturePINVOKE.Texture_GetSampleQuality(swigCPtr);
    return ret;
  }

  public uint GetAccessMode() {
    uint ret = ITexturePINVOKE.Texture_GetAccessMode(swigCPtr);
    return ret;
  }

  public virtual void BuildMipSubLevels() {
    ITexturePINVOKE.Texture_BuildMipSubLevels(swigCPtr);
  }

  public enum MapAccess {
    ReadOnly,
    WriteOnly,
    ReadWrite
  }

  public enum Type {
    T_1D,
    T_2D,
    T_3D,
    T_Cube
  }

  public enum CubeFaces {
    Positive_X = 0,
    Negative_X = 1,
    Positive_Y = 2,
    Negative_Y = 3,
    Positive_Z = 4,
    Negative_Z = 5
  }

}

}
