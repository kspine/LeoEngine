; MCF Notation 语法
; 1. 控制字符
;    \     若其后为字符 b, n, r, t，则分别转义为 <Backspace>, <LF>, <CR>, <Tab>；否则，
;          若其后为字符 x，并且
;            字符 x 后附带两个十六进制数字，则将其后的十六进制值转换为其编码后的字符字面值；否则，
;            原样拷贝该字符 x 和其后的字符，直到遇到第一个不符合上述条件的字符为止；否则，
;          若其后为换行符，则该换行符被删除；否则，
;          按字面值拷贝其后面的任何字符。
;    =     在某一行中第一次出现的 = 将该行分为名称和内容两部分，这样的两部分构成一个“值”。
;          对于名称和内容，首尾的空格或制表符将被全部删除。
;          名称不能为空，但内容可以为空；
;    <LF>  表示一个“值”定义的完成。
;    {     表示一个“包”定义的起始。隐含换行符语义。
;          若 { 的前面是一个“值”定义，就用那个“值”的名字作为“包”的名字；否则，
;          若 { 的的字符串删除首尾空格或制表符后非空，则用这个字符串作为“包”的名字；否则，
;          将产生一个错误，
;    }     表示一个“包”定义的结束。隐含换行符语义；
;    ;     定义注释的开始。注释的内容从某一行第一个不被转义的 ; 起始，直到行末；
; 2. 约束
;    1)    “值”和“包”遵循相同的命名约束：名称中可以使用任意的字符，但若需要使用控制字符，需进行转义处理。
;          由于名称首尾的空格或制表符会被删除，若
;            需使用空格或制表符前导的名称，可在前导的空格或制表符之前加一个转义字符 \；
;            需使用空格或制表符收尾的名称，可在收尾的空格或制表符之后加一个转义字符再加一个空格或制表符，
;              在这种情况下名称以转义字符首尾，而这样的转义字符会被删除；
;    2)    “值”的内容遵循和值的名称相同的约束，除了 = 不需转义以外；
;    3)    语义上，某一行的内容删除全部注释以及首尾空格或制表符后必须符合以下三种形式中的其中一种：
;          a. 空行；
;          b. “值”定义；
;          c. “包”定义起始；
;          d. “包”定义结束；
;    4)    “包”可以嵌套定义；
;    5)    路径、名称完全相同的“包”会被合并；路径、名称完全相同的“值”按照定义顺序，后定义的“值”会覆盖先前定义的“值”。

; MCF Build 项目文件语法
; 1. 每一套配置包都是一个定义于文件范围内的包（或值，参见 2。这种情况下仅继承）；
; 2. 配置包之间可以继承，通过定义一个与该配置包同路径、同名的值来指定被继承的包；
;    继承来的值按照父配置包到子配置包的顺序叠加。对于同路径、同名的值：
;      若子配置包定义的值的内容以 > 开头，则将其后子配置包定义的值连接到父配置包定义的值之后，中间以一个空格分隔；否则，
;      若子配置包定义的值的内容以 < 开头，则将其后子配置包定义的值连接到父配置包定义的值之前，中间以一个空格分隔；否则，
;      若子配置包定义的值的内容以 = 开头或其他情况，则使用其后子配置包定义的值取代父配置包定义的值；
; 3. 配置包规格说明：
;    名称            类型    需求    说明
;    Ignored          值     可选    指定筛选源文件时，要排除（不参与构建）的文件或目录。
;                                    可以使用通配符。使用空格来分隔每一项。
;                                    如果某一项的内容本身包含空格，需要用双引号将这一项括起来。
;                                    文件名匹配其中任何一项的文件将被忽略，
;                                    目录名匹配其中任何一项的目录下的所有子目录和文件都将被忽略。
;    Compilers        包     必需    指定用来将源文件转换为目标文件（object files）的程序。
;                                    该包内针对每一个或多个文件扩展名定义一个包。
;                                    如需定义多个，使用空格分隔它们。
;                                    每一个定义于 Compilers 中的包必须包含以下两个值：
;                                    CommandLine(*)   指定调用的命令行。
;                                    Dependency(*)    指定用于判定文件依赖关系的命令行，此处不需要指定输出文件。
;                                                     输出内容必须符合 Makefile 格式，且内容必须输出于标准输出流中。
;    Linkers          包     必需    指定用来将目标文件转换为最终构建的输出文件的程序。
;                                    该包必须包含以下两个值：
;                                    Partial(*)       如果文件太多导致命令行太长，将首先将其中的多个目标文件链接成为
;                                                     中间文件，然后将其余的目标文件与中间文件进行链接。
;                                                     这个过程即为众所周知的部分链接。该值指定部分链接所使用的命令行。
;                                    Full(*)          指定用于链接所有目标文件和中间文件生成最终输出文件的命令行。
;    DefaultOutput    值     可选    指定缺省的输出文件路径（相对于目标文件根目录）。
;                                    如果不指定此值，就必须在调用 MCFBuild 时指定一个有效的输出文件名。
;
;    (*) 在命令行中可以使用“变量”。
;        每一个在配置包根路径下定义的值都是一个变量。变量可以通过 $变量名$ 的方式加以引用。
;        如果要在命令行中使用 $ 字面值，请使用 $$。
;        在命令行中使用 $$IN 表示输入文件，$$OUT 表示输出文件。

Default = Debug

General {
	CompilerFlags		= -Wall -Wextra -pipe -mfpmath=sse,387 -msse2 -masm=intel
	LinkerFlags			= -Wall -Wextra -static
	ExtraLibs			= -lversion -lshlwapi

	CFlags				= $CompilerFlags$ -c -std=c11
	CPPFlags			= $CompilerFlags$ -c -std=c++11

	Ignored				= .* *.a *.bak *.cmd *.exe *.h *.hpp *.mcfproj *.o

	Compilers {
		c {
			CommandLine	= gcc $CFlags$ $$IN -o $$OUT
			Dependency	= gcc $CFlags$ $$IN -MM
		}
		cpp cxx cc {
			CommandLine	= g++ $CPPFlags$ $$IN -o $$OUT
			Dependency	= g++ $CPPFlags$ $$IN -MM
		}
		rc {
			CommandLine	= windres -O coff -i $$IN -o $$OUT
			Dependency	=
		}
	}
	Linkers {
		Partial			= ld -r $$IN -o $$OUT
		Full			= g++ $LinkerFlags$ $$IN $ExtraLibs$ -o $$OUT
	}
	DefaultOutput		= MCFBuild.exe
}

Debug = General {
	CompilerFlags		=> -fno-builtin -g -O0
	LinkerFlags			=> -O0
}

Release = General {
	CompilerFlags		=> -DNDEBUG -O3 -ffunction-sections -fdata-sections
	LinkerFlags			=> -O3 -Wl,--gc-sections,-s
}
